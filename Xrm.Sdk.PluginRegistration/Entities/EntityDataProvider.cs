//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xrm.Sdk.PluginRegistration.Entities
{
	
	/// <summary>
	/// Developers can register plug-ins on a data provider to enable data access for virtual entities in the system.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entitydataprovider")]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("CrmSvcUtil", "9.0.0.9369")]
	public partial class EntityDataProvider : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		
		public static class Fields
		{
			public const string ComponentState = "componentstate";
			public const string CreatePlugin = "createplugin";
			public const string DataSourceLogicalName = "datasourcelogicalname";
			public const string DeletePlugin = "deleteplugin";
			public const string Description = "description";
			public const string EntityDataProviderId = "entitydataproviderid";
			public const string Id = "entitydataproviderid";
			public const string EntityDataProviderIdUnique = "entitydataprovideridunique";
			public const string IntroducedVersion = "introducedversion";
			public const string IsCustomizable = "iscustomizable";
			public const string IsManaged = "ismanaged";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string RetrieveMultiplePlugin = "retrievemultipleplugin";
			public const string RetrievePlugin = "retrieveplugin";
			public const string SolutionId = "solutionid";
			public const string UpdatePlugin = "updateplugin";
			public const string organization_entitydataprovider = "organization_entitydataprovider";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public EntityDataProvider() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "entitydataprovider";
		
		public const string PrimaryIdAttribute = "entitydataproviderid";
		
		public const string PrimaryNameAttribute = "name";
		
		public const int EntityTypeCode = 78;
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentstate")]
		public Microsoft.Xrm.Sdk.OptionSetValue ComponentState
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("componentstate");
			}
		}
		
		/// <summary>
		/// Create Plugin
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createplugin")]
		public System.Nullable<System.Guid> CreatePlugin
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("createplugin");
			}
			set
			{
				this.OnPropertyChanging("CreatePlugin");
				this.SetAttributeValue("createplugin", value);
				this.OnPropertyChanged("CreatePlugin");
			}
		}
		
		/// <summary>
		/// When creating a Data Provider, the end user must select the name of the Data Source entity that will be created for the provider.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("datasourcelogicalname")]
		public string DataSourceLogicalName
		{
			get
			{
				return this.GetAttributeValue<string>("datasourcelogicalname");
			}
			set
			{
				this.OnPropertyChanging("DataSourceLogicalName");
				this.SetAttributeValue("datasourcelogicalname", value);
				this.OnPropertyChanged("DataSourceLogicalName");
			}
		}
		
		/// <summary>
		/// Delete Plugin
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("deleteplugin")]
		public System.Nullable<System.Guid> DeletePlugin
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("deleteplugin");
			}
			set
			{
				this.OnPropertyChanging("DeletePlugin");
				this.SetAttributeValue("deleteplugin", value);
				this.OnPropertyChanged("DeletePlugin");
			}
		}
		
		/// <summary>
		/// What is this Data Provider used for and data store technologies does it target?
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.OnPropertyChanging("Description");
				this.SetAttributeValue("description", value);
				this.OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// Unique identifier of the data provider.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entitydataproviderid")]
		public System.Nullable<System.Guid> EntityDataProviderId
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("entitydataproviderid");
			}
			set
			{
				this.OnPropertyChanging("EntityDataProviderId");
				this.SetAttributeValue("entitydataproviderid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
				this.OnPropertyChanged("EntityDataProviderId");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entitydataproviderid")]
		public override System.Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.EntityDataProviderId = value;
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entitydataprovideridunique")]
		public System.Nullable<System.Guid> EntityDataProviderIdUnique
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("entitydataprovideridunique");
			}
		}
		
		/// <summary>
		/// Version in which the form is introduced.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("introducedversion")]
		public string IntroducedVersion
		{
			get
			{
				return this.GetAttributeValue<string>("introducedversion");
			}
			set
			{
				this.OnPropertyChanging("IntroducedVersion");
				this.SetAttributeValue("introducedversion", value);
				this.OnPropertyChanged("IntroducedVersion");
			}
		}
		
		/// <summary>
		/// Information that specifies whether this component can be customized.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("iscustomizable")]
		public Microsoft.Xrm.Sdk.BooleanManagedProperty IsCustomizable
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.BooleanManagedProperty>("iscustomizable");
			}
			set
			{
				this.OnPropertyChanging("IsCustomizable");
				this.SetAttributeValue("iscustomizable", value);
				this.OnPropertyChanged("IsCustomizable");
			}
		}
		
		/// <summary>
		/// Indicates whether the solution component is part of a managed solution.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismanaged")]
		public System.Nullable<bool> IsManaged
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ismanaged");
			}
		}
		
		/// <summary>
		/// The name of this Data Provider. This is the name that appears in the dropdown when creating a new entity.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("name")]
		public string Name
		{
			get
			{
				return this.GetAttributeValue<string>("name");
			}
			set
			{
				this.OnPropertyChanging("Name");
				this.SetAttributeValue("name", value);
				this.OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// Unique identifier for the organization.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
		public System.Nullable<System.Guid> OrganizationId
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("organizationid");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overwritetime")]
		public System.Nullable<System.DateTime> OverwriteTime
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("overwritetime");
			}
		}
		
		/// <summary>
		/// MultipleRetrieve Plugin
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("retrievemultipleplugin")]
		public System.Nullable<System.Guid> RetrieveMultiplePlugin
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("retrievemultipleplugin");
			}
			set
			{
				this.OnPropertyChanging("RetrieveMultiplePlugin");
				this.SetAttributeValue("retrievemultipleplugin", value);
				this.OnPropertyChanged("RetrieveMultiplePlugin");
			}
		}
		
		/// <summary>
		/// Retrieve Plugin
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("retrieveplugin")]
		public System.Nullable<System.Guid> RetrievePlugin
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("retrieveplugin");
			}
			set
			{
				this.OnPropertyChanging("RetrievePlugin");
				this.SetAttributeValue("retrieveplugin", value);
				this.OnPropertyChanged("RetrievePlugin");
			}
		}
		
		/// <summary>
		/// Unique identifier of the associated solution.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutionid")]
		public System.Nullable<System.Guid> SolutionId
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("solutionid");
			}
		}
		
		/// <summary>
		/// Update Plugin
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("updateplugin")]
		public System.Nullable<System.Guid> UpdatePlugin
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("updateplugin");
			}
			set
			{
				this.OnPropertyChanging("UpdatePlugin");
				this.SetAttributeValue("updateplugin", value);
				this.OnPropertyChanged("UpdatePlugin");
			}
		}
		
		/// <summary>
		/// 1:N entitydataprovider_datasource
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("entitydataprovider_datasource")]
		public System.Collections.Generic.IEnumerable<Xrm.Sdk.PluginRegistration.Entities.EntityDataSource> entitydataprovider_datasource
		{
			get
			{
				return this.GetRelatedEntities<Xrm.Sdk.PluginRegistration.Entities.EntityDataSource>("entitydataprovider_datasource", null);
			}
			set
			{
				this.OnPropertyChanging("entitydataprovider_datasource");
				this.SetRelatedEntities<Xrm.Sdk.PluginRegistration.Entities.EntityDataSource>("entitydataprovider_datasource", null, value);
				this.OnPropertyChanged("entitydataprovider_datasource");
			}
		}
		
		/// <summary>
		/// N:1 organization_entitydataprovider
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("organization_entitydataprovider")]
		public Xrm.Sdk.PluginRegistration.Entities.Organization organization_entitydataprovider
		{
			get
			{
				return this.GetRelatedEntity<Xrm.Sdk.PluginRegistration.Entities.Organization>("organization_entitydataprovider", null);
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public EntityDataProvider(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["entitydataproviderid"] = base.Id;
                        break;
                    case "entitydataproviderid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentstate")]
		public virtual componentstate? ComponentStateEnum
		{
			get
			{
				return ((componentstate?)(EntityOptionSetEnum.GetEnum(this, "componentstate")));
			}
		}
	}
}