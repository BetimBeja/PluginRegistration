//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xrm.Sdk.PluginRegistration.Entities
{
	
	/// <summary>
	/// Stores data regarding organization insights notification
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("orginsightsnotification")]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("CrmSvcUtil", "9.0.0.9369")]
	public partial class OrgInsightsNotification : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		
		public static class Fields
		{
			public const string InternalName = "internalname";
			public const string JsonData = "jsondata";
			public const string Name = "name";
			public const string OrgInsightsNotificationId = "orginsightsnotificationid";
			public const string Id = "orginsightsnotificationid";
			public const string organization_orginsightsnotification = "organization_orginsightsnotification";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public OrgInsightsNotification() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "orginsightsnotification";
		
		public const string PrimaryIdAttribute = "orginsightsnotificationid";
		
		public const int EntityTypeCode = 9690;
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Name of the notification which is used for retrieving the data
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("internalname")]
		public string InternalName
		{
			get
			{
				return this.GetAttributeValue<string>("internalname");
			}
			set
			{
				this.OnPropertyChanging("InternalName");
				this.SetAttributeValue("internalname", value);
				this.OnPropertyChanged("InternalName");
			}
		}
		
		/// <summary>
		/// Notification Data in Json format
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("jsondata")]
		public string JsonData
		{
			get
			{
				return this.GetAttributeValue<string>("jsondata");
			}
		}
		
		/// <summary>
		/// Legend Name used while displaying the notification
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("name")]
		public string Name
		{
			get
			{
				return this.GetAttributeValue<string>("name");
			}
			set
			{
				this.OnPropertyChanging("Name");
				this.SetAttributeValue("name", value);
				this.OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("orginsightsnotificationid")]
		public System.Nullable<System.Guid> OrgInsightsNotificationId
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("orginsightsnotificationid");
			}
			set
			{
				this.OnPropertyChanging("OrgInsightsNotificationId");
				this.SetAttributeValue("orginsightsnotificationid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
				this.OnPropertyChanged("OrgInsightsNotificationId");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("orginsightsnotificationid")]
		public override System.Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.OrgInsightsNotificationId = value;
			}
		}
		
		/// <summary>
		/// N:1 organization_orginsightsnotification
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("organization_orginsightsnotification")]
		public Xrm.Sdk.PluginRegistration.Entities.Organization organization_orginsightsnotification
		{
			get
			{
				return this.GetRelatedEntity<Xrm.Sdk.PluginRegistration.Entities.Organization>("organization_orginsightsnotification", null);
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public OrgInsightsNotification(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["orginsightsnotificationid"] = base.Id;
                        break;
                    case "orginsightsnotificationid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}